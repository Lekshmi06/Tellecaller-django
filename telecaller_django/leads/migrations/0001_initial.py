# Generated by Django 5.0.4 on 2024-05-06 04:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Leads',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead_name', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('lead_email', models.EmailField(blank=True, default='', max_length=254, null=True)),
                ('lead_contact', models.CharField(blank=True, default='', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('log_username', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('log_password', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('log_date', models.DateField(auto_now_add=True, null=True)),
                ('log_time', models.TimeField(auto_now_add=True, null=True)),
                ('position', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('is_staff', models.IntegerField(default=0)),
                ('active_status', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeRegister_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emp_name', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('emp_contact_no', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('emp_email', models.EmailField(default='email@gmail.com', max_length=255)),
                ('logreg_id', models.ForeignKey(default='', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Leads_assignto_tc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Response', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('Reason', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('Assign_Date', models.DateField(auto_now_add=True, null=True)),
                ('Allocate_time', models.TimeField(default='00:00:00')),
                ('Update_Date', models.DateField(null=True)),
                ('Next_update_date', models.DateField(null=True)),
                ('Update_Action', models.IntegerField(default=0)),
                ('Status', models.IntegerField(default=0)),
                ('TC_Id', models.ForeignKey(default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='leads.employeeregister_details')),
                ('leadId', models.ForeignKey(default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='leads.leads')),
            ],
        ),
    ]
